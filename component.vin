//
// component.vin
//
// Simulation of the DLX
// Written by Edsko de Vries, Summer 2003
//
// Copyright (C) 2003 - 2018 Edsko de Vries and jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

Brush componentBrush = SolidBrush(LIGHT_BLUE);
Font componentFont = Font("Calibri", 9);          // joj

class Component(num _x, num _y, num _w, num _h, string caption) {

	num x = _x;
	num y = _y;
	num w = _w;
	num h = _h;

    Rectangle bg = Rectangle2(0, 0, blackPen, componentBrush, x, y, w, h);
	bg.setRounded(2, 2);	// {joj 16/10/16}
    Rectangle label;

    if (w >= h) {
        label = Rectangle2(0, 0, 0, 0, x, y, w, h, 0, componentFont, caption);
    } else {
        label = Rectangle(0, 0, 0, 0, x + w/2 - 1, y + h/2, -w/2, -h/2, w, h, 0, componentFont, caption);   // {joj 7/10/16}
		label.rotate(-90);			// {joj 7/10/16}
    }

    function setOpacity(num opacity) { // {joj 20/08/10}
        bg.setOpacity(opacity);
        label.setOpacity(opacity);
    }

}

class Stack(num _x, num _y) {

	num w = 60;
	num h = 20;
	num length = MEMORY_ADDRESSES;
	num x = _x;
	num y = _y;
	num addr_size = 4;
	num maxdigits = 3;

	string hex[length*addr_size];
	//string chars[] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"};
	string chars[18];
	fillchars(chars);
	num div = (length*addr_size)/16;
	num digits = 1;
	for(num i=1; i<=maxdigits; i++){
		num p = div^i;
		if(div < p){
			digits = i+1;
			break;
		}
	}
	countHex(hex, 0, (length*addr_size), digits, chars, "");
	string addresses[length];
	num j = 0;
	for(i=0; i<(length*addr_size); i+=addr_size){
	 	addresses[j] = hex[i];
	 	j++;
	}
	Register stack[length];
	for(j=0; j<(length); j++) {
		Register r = Register(x, y, w, h, LEFT, addresses[j]);
		r.rotateLabel(90);
		stack[j] = r;
		y += h;
	}

	function store(num pos, num val) {
		stack[pos].setNewValue(val);
		stack[pos].update();
	}

}

num function countHex(string h[], num index, num length, num digits, string chars[], string pref){
	num endreached = 0;
	for (num i=0; i<16; i++){
		if (digits > 1){
			num newindex = 0;
			string newpref = pref + chars[i];
			if(endreached == 0)
				newindex = countHex(h, index, length, (digits-1), chars, newpref);
			if(index >= length) return 0;
			index = newindex;
		}
		else{
			if(index+i < length)
				h[index+i] = pref + chars[i];
		}
	}
	return index + 16;
}

function fillchars(string chars[]) {
	chars[0] = "0";
	chars[1] = "1";
	chars[2] = "2";
	chars[3] = "3";
	chars[4] = "4";
	chars[5] = "5";
	chars[6] = "6";
	chars[7] = "7";
	chars[8] = "8";
	chars[9] = "9";
	chars[10] = "A";
	chars[11] = "B";
	chars[12] = "C";
	chars[13] = "D";
	chars[14] = "E";
	chars[15] = "F";
}

// eof
