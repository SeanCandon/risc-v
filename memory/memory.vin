//
// sample .vin file
//

class Memory(num _x, num _y){

  num w = 100;
	num h = 20;
	num length = MEMORY_ADDRESSES;
	num x = _x;
	num y = _y;
	num addr_size = 4;
	num maxdigits = 3;

	num off = 40;

	num outer_x = x;
	num outer_y = y;
	num outer_w = w;
	num outer_h = (h * length + 20);

	x = x + 10;
	y = y + 10;
	w = w-30;

	Rectangle outer = Rectangle2(0, 0, blackPen, stackBrush, outer_x, outer_y, outer_w, outer_h);

	string hex[length*addr_size];
	string chars[18];
	fillchars(chars);
	num div = (length*addr_size)/16;
	num digits = 1;
	for(num i=1; i<=maxdigits; i++){
		num p = div^i;
		if(div < p){
			digits = i+1;
			break;
		}
	}
	countHex(hex, 0, (length*addr_size), digits, chars, "");
	string addresses[length];
	num j = 0;
	for(i=0; i<(length*addr_size); i+=addr_size){
	 	addresses[j] = hex[i];
	 	j++;
	}
	Register stack[length];
	for(j=(length-1); j>=0; j--) {
		Register r = Register(x, y, w, h, LEFT, addresses[j]);
		r.rotateLabel(90);
		stack[j] = r;
		y += h;
	}

  // num reserved[length];
  // for(i=0; i<length; i++){
  //   reserved[i] = 2;
  // }
  //
  // y = _y+10;
  // Rectangle reservedText[length];
  // for(j=(length-1); j>=0; j--) {
  //   Rectangle rec = Rectangle2(0, 0, whitePen, stackBrush, x+w+15, y,
  // 		w, h, blackPen, componentFont, sprintf("unreserved"));
	// 	reservedText[j] = rec;
	// 	y += h;
	// }

  function store(num addr, num val) {
		num pos = floor((addr/4))%MEMORY_ADDRESSES;
		stack[pos].setNewValue(val);
		stack[pos].update();
	}

  // function store_cond(num addr, num val, num hart){
  //   num pos = floor((addr/4))%MEMORY_ADDRESSES;
  //   if(reserved[pos] == hart || reserved[pos]==2){
  //     stack[pos].setNewValue(val);
  //     stack[pos].update();
  //   }
  //   //invalidate reservation
  //   reserved[pos] = 2;
  //   reservedText[pos].setTxt("unreserved");
  // }

  num function load(num addr){
    num pos = floor((addr/4))%MEMORY_ADDRESSES;
    return stack[pos].value;
  }

  // num function load_res(num addr, num hart){
  //   num pos = floor((addr/4))%MEMORY_ADDRESSES;
  //   //caller hart reserves mem address
  //   reserved[pos] = hart;
  //   if(hart == HART_1){
  //     reservedText[pos].setTxt("reserved by h1");
  //   }
  //   else{
  //     reservedText[pos].setTxt("reserved by h2");
  //   }
  //   return stack[pos].value;
  // }
}

num function countHex(string h[], num index, num length, num digits, string chars[], string pref){
	num endreached = 0;
	for (num i=0; i<16; i++){
		if (digits > 1){
			num newindex = 0;
			string newpref = pref + chars[i];
			if(endreached == 0)
				newindex = countHex(h, index, length, (digits-1), chars, newpref);
			if(index >= length) return 0;
			index = newindex;
		}
		else{
			if(index+i < length)
				h[index+i] = pref + chars[i];
		}
	}
	return index + 16;
}

function fillchars(string chars[]) {
	chars[0] = "0";
	chars[1] = "1";
	chars[2] = "2";
	chars[3] = "3";
	chars[4] = "4";
	chars[5] = "5";
	chars[6] = "6";
	chars[7] = "7";
	chars[8] = "8";
	chars[9] = "9";
	chars[10] = "A";
	chars[11] = "B";
	chars[12] = "C";
	chars[13] = "D";
	chars[14] = "E";
	chars[15] = "F";
}


//eof
