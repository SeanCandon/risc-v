//
// schematic.vin
//
// Simulation of the DLX
// Written by Edsko de Vries, Summer 2003
//
// Copyright (C) 2003 - 2018 Edsko de Vries and jones@scss.tcd.ie
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software Foundation;
// either version 2 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
//

string name = getArg("name", "");					// optional name of code example {joj 2/11/16}
if (name != "")
	name = sprintf(":  %s", name);					// {joj 2/10/16}}

Font fTitle = Font("Calibri", 20, SMALLCAPS | ITALIC);
Pen borderPen = SolidPen(DASH, 1, DARK_BLUE, ROUND_START | ROUND_JOIN | ROUND_END);

const num NUM_REGS = 32;
const num REG_WIDTH = 20;
const num REG_HEIGHT = 25;

Pen delimeter = SolidPen(DOT, THIN, BLACK);

Font arialBold10 = Font("Calibri", 10, BOLD);

const num LOGOW = 20;
const num LOGOH = 20;

num curr_ins = 0;
num curr_loc = 0;

Memory memory = Memory(500, 80);

// AnimPipe toMem = AnimPipe();
// toMem.resize(10);
// toMem.addPoint(320, 250);
// toMem.addPoint(500, 250);
//
// AnimPipe fromMem = AnimPipe();
// fromMem.resize(10);
// fromMem.addPoint(480, 250);
// fromMem.addPoint(300, 250);

// gobj needed by compiler to handle events. below rectangle created
// just for purposes of handling incoming message events
Rectangle obj = Rectangle2(0, 0, whitePen, whiteBrush, 20, 20,
  10, 10, blackPen, font, sprintf(""));

// incoming message event handler. Parses instruction from hart
// and executes. In the event of a load instruction sends the
// loaded value back to the original hart.
when obj ~> eventMessage(string m){

	obj.setTxt(m);
	//sendToHart(0, "not busy");

	if(m == "close"){ // if message "close" arrives in the event the user wants
		endParallel();	// the parallelism feature closed.
	}
	else{
		num p = m.find(", ");
		string nm = m.left(p);
		if(nm == "busy?"){
			m = m.right(-p-2);
			num orig = stringToNum(m);
			//obj.setTxt(orig.toString());
			if(bus_busy == 0){
				sendToHart(orig, "not busy" ,"", "");
				bus_busy = 1;
			}
			else{
				if(curr_ins == SC){
					sendToHart(orig, "busy1", ", ", curr_loc.toString());
				}
				sendToHart(orig, "busy2", "", "");
				//bus_busy = 0;
			}
		}
		else{
			//obj.setTxt(m);
			num origin = stringToNum(nm);
			m = m.right(-p-2);
			p = m.find(", ");
			nm = m.left(p);
			num instr = stringToNum(nm);
			m = m.right(-p-2);
			p = m.find(", ");
			nm = m.left(p);
			num regv1 = stringToNum(nm);
			m = m.right(-p-2);
			num regv2 = stringToNum(m);

			num retval;
			if(instr == SC){
				if(origin == HART_1){
					sendToHart(HART_2, instr.toString(), ", ", regv1.toString());
				}
				else{
					sendToHart(HART_1, instr.toString(), ", ", regv1.toString());
				}
			}

			curr_ins = instr;
			curr_loc = regv1;

			//fork(executeInstr(origin, instr, regv1, regv2));

			if(instr == ST){
				memory.store(regv1, regv2);
			}
			else if(instr == SC){
				memory.store(regv1, regv2);
			}
			else if(instr == LD){
				retval = memory.load(regv1);
				sendToHart(origin, instr.toString(), ", ", retval.toString());
			}
			else if(instr == LR){
				retval = memory.load(regv1);
				sendToHart(origin, instr.toString(), ", ", retval.toString());
			}
			bus_busy = 0;
		}
	}
}

function executeInstr(num orig, num ins, num r1, num r2){
	num retval;
	//toMem.animate(5);
	if(ins == ST){
		memory.store(r1, r2);
	}
	else if(ins == SC){
		memory.store(r1, r2);
	}
	else if(ins == LD){
		//fromMem.animate(5);
		retval = memory.load(r1);
		sendToHart(orig, ins.toString(), ", ", retval.toString());
	}
	else if(ins == LR){
		//fromMem.animate(5);
		retval = memory.load(r1);
		sendToHart(orig, ins.toString(), ", ", retval.toString());
	}
}


// eof
